Index: gdx-controllers-iosmoe/src/com/badlogic/gdx/controllers/IosController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gdx-controllers-iosmoe/src/com/badlogic/gdx/controllers/IosController.java b/gdx-controllers-iosmoe/src/com/badlogic/gdx/controllers/IosController.java
--- a/gdx-controllers-iosmoe/src/com/badlogic/gdx/controllers/IosController.java	(revision 53c8f08fa6d02b54aeaf9cefd10aec897448bb7b)
+++ b/gdx-controllers-iosmoe/src/com/badlogic/gdx/controllers/IosController.java	(revision a1eb9331309587ec56c3822bfd096629cc3e4cf2)
@@ -1,30 +1,24 @@
 /*DO NOT EDIT THIS FILE - it is machine generated*/
 package com.badlogic.gdx.controllers;
 
+import apple.corehaptics.CHHapticParameterCurve;
+import apple.gamecontroller.GCController.Block_setControllerPausedHandler;
+import apple.gamecontroller.GCGamepad.Block_setValueChangedHandler;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.utils.TimeUtils;
 import apple.corehaptics.CHHapticEngine;
 import apple.corehaptics.CHHapticEvent;
 import apple.corehaptics.CHHapticEventParameter;
-import apple.corehaptics.CHHapticEventParameterID;
-import apple.corehaptics.CHHapticEventType;
-import apple.corehaptics.CHHapticParameterCurve;
 import apple.corehaptics.CHHapticPattern;
 import apple.corehaptics.protocol.CHHapticPatternPlayer;
-import apple.foundation.Foundation;
 import apple.foundation.NSArray;
-import apple.foundation.NSErrorException;
 import apple.gamecontroller.GCController;
 import apple.gamecontroller.GCControllerAxisInput;
 import apple.gamecontroller.GCControllerButtonInput;
 import apple.gamecontroller.GCControllerDirectionPad;
 import apple.gamecontroller.GCControllerElement;
-import apple.gamecontroller.enums.GCControllerPlayerIndex;
 import apple.gamecontroller.GCExtendedGamepad;
 import apple.gamecontroller.GCGamepad;
-import apple.gamecontroller.GCHapticsLocality;
-import org.robovm.objc.block.VoidBlock1;
-import org.robovm.objc.block.VoidBlock2;
 import java.util.UUID;
 import static apple.gamecontroller.enums.GCDeviceBatteryState.*;
 import apple.gamecontroller.c.GameController;
@@ -76,30 +70,12 @@
         axisValues = new float[getAxisCount()];
         ObjCRuntime.retainObject(controller.getPeerPointer());
         if (getMajorSystemVersion() < 13) {
-            controller.setControllerPausedHandler(new VoidBlock1<GCController>() {
-
-                @Override
-                public void invoke(GCController gcController) {
-                    onPauseButtonPressed();
-                }
-            });
+            controller.setControllerPausedHandler(e -> onPauseButtonPressed());
         }
         if (controller.extendedGamepad() != null)
-            controller.extendedGamepad().setValueChangedHandler(new VoidBlock2<GCExtendedGamepad, GCControllerElement>() {
-
-                @Override
-                public void invoke(GCExtendedGamepad gcExtendedGamepad, GCControllerElement gcControllerElement) {
-                    onControllerValueChanged(gcControllerElement);
-                }
-            });
+            controller.extendedGamepad().setValueChangedHandler((gamepad, element) -> onControllerValueChanged(element));
         else if (controller.gamepad() != null)
-            controller.gamepad().setValueChangedHandler(new VoidBlock2<GCGamepad, GCControllerElement>() {
-
-                @Override
-                public void invoke(GCGamepad gcGamepad, GCControllerElement gcControllerElement) {
-                    onControllerValueChanged(gcControllerElement);
-                }
-            });
+            controller.gamepad().setValueChangedHandler((gamepad, element) -> onControllerValueChanged(element));
         if (getMajorSystemVersion() >= 14)
             try {
                 hapticEngine = controller.haptics().createEngineWithLocality(GameController.GCHapticsLocalityDefault());
@@ -450,8 +426,10 @@
     }
 
     public CHHapticPattern constructRumbleEvent(float length, float strength) {
-        NSArray<CHHapticEventParameter> params = NSArray.arrayWithObjects(CHHapticEventParameter.alloc().initWithParameterIDValue(CoreHaptics.CHHapticEventParameterIDHapticIntensity(), strength), CHHapticEventParameter.alloc().initWithParameterIDValue(CoreHaptics.CHHapticEventParameterIDHapticSharpness(), .5f));
-        return CHHapticPattern.alloc().initWithEventsParameterCurvesError(NSArray.arrayWithObject(CHHapticEvent.alloc().initWithEventTypeParametersRelativeTimeDuration(CoreHaptics.CHHapticEventTypeHapticContinuous(), params, 0, length)), NSArray.array(), null);
+        NSArray<CHHapticEventParameter> params = (NSArray<CHHapticEventParameter>)NSArray.arrayWithObjects(CHHapticEventParameter.alloc().initWithParameterIDValue(CoreHaptics.CHHapticEventParameterIDHapticIntensity(), strength), CHHapticEventParameter.alloc().initWithParameterIDValue(CoreHaptics.CHHapticEventParameterIDHapticSharpness(), .5f));
+        return CHHapticPattern.alloc().initWithEventsParameterCurvesError(
+                (NSArray<? extends CHHapticEvent>)NSArray.arrayWithObject(CHHapticEvent.alloc().initWithEventTypeParametersRelativeTimeDuration(CoreHaptics.CHHapticEventTypeHapticContinuous(), params, 0, length)),
+                (NSArray<? extends CHHapticParameterCurve>)NSArray.array(), null);
     }
 
     private static int getMajorSystemVersion() {
Index: gdx-controllers-iosmoe/src/com/badlogic/gdx/controllers/IosControllerManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gdx-controllers-iosmoe/src/com/badlogic/gdx/controllers/IosControllerManager.java b/gdx-controllers-iosmoe/src/com/badlogic/gdx/controllers/IosControllerManager.java
--- a/gdx-controllers-iosmoe/src/com/badlogic/gdx/controllers/IosControllerManager.java	(revision 53c8f08fa6d02b54aeaf9cefd10aec897448bb7b)
+++ b/gdx-controllers-iosmoe/src/com/badlogic/gdx/controllers/IosControllerManager.java	(revision a1eb9331309587ec56c3822bfd096629cc3e4cf2)
@@ -1,17 +1,19 @@
 /*DO NOT EDIT THIS FILE - it is machine generated*/
 package com.badlogic.gdx.controllers;
 
+import apple.foundation.NSNotificationCenter;
+import apple.foundation.NSOperationQueue;
+import apple.gamecontroller.c.GameController;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.utils.Array;
-import apple.foundation.Foundation;
 import apple.foundation.NSArray;
 import apple.gamecontroller.GCController;
 import apple.uikit.UIKeyCommand;
 import apple.uikit.enums.UIKeyModifierFlags;
 import apple.uikit.UIViewController;
 import org.moe.natj.objc.SEL;
-import org.robovm.objc.block.VoidBlock1;
 import apple.uikit.UIDevice;
+import org.moe.natj.objc.ann.Selector;
 
 /**
  * DO NOT EDIT THIS FILE - it is machine generated
@@ -30,7 +32,7 @@
 
     public static void enableICade(UIViewController controller, SEL action) {
         for (int i = 0; i < ICadeController.KEYS_TO_HANDLE.length(); i++) {
-            controller.addKeyCommand(new UIKeyCommand(Character.toString(ICadeController.KEYS_TO_HANDLE.charAt(i)), UIKeyModifierFlags.None, action));
+            controller.addKeyCommand(UIKeyCommand.keyCommandWithInputModifierFlagsAction(Character.toString(ICadeController.KEYS_TO_HANDLE.charAt(i)), 0, action));
         }
         controller.becomeFirstResponder();
         Gdx.app.log("Controllers", "iCade support activated");
@@ -75,25 +77,14 @@
     private void initializeControllerArray() {
         if (!initialized && getMajorSystemVersion() >= 7) {
             initialized = true;
-            NSArray<GCController> controllers = GCController.controllers();
+            NSArray<GCController> controllers = (NSArray<GCController>)GCController.controllers();
             for (GCController controller : controllers) {
                 if (isSupportedController(controller))
                     this.controllers.add(new IosController(controller));
             }
-            GCController.Notifications.observeDidConnect(new VoidBlock1<GCController>() {
+            NSNotificationCenter.defaultCenter().addObserverForNameObjectQueueUsingBlock(GameController.GCControllerDidConnectNotification(), null, NSOperationQueue.mainQueue(), note -> onControllerConnect((GCController)note.object()));
 
-                @Override
-                public void invoke(GCController gcController) {
-                    onControllerConnect(gcController);
-                }
-            });
-            GCController.Notifications.observeDidDisconnect(new VoidBlock1<GCController>() {
-
-                @Override
-                public void invoke(GCController gcController) {
-                    onControllerDisconnect(gcController);
-                }
-            });
+            NSNotificationCenter.defaultCenter().addObserverForNameObjectQueueUsingBlock(GameController.GCControllerDidDisconnectNotification(), null, NSOperationQueue.mainQueue(), note -> onControllerDisconnect((GCController)note.object()));
         }
     }
 
